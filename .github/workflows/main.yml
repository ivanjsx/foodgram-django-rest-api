name: Main Foodgram Workflow

on:
  push:
    branches:
      - main

jobs:
  
  backend_tests:
    runs-on: ubuntu-latest
    steps:
      - 
        name: check out code
        uses: actions/checkout@v4
      - 
        name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11.9
      - 
        name: install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 flake8-isort flake8-return flake8-broken-line
          pip install -r ./backend/requirements.txt 
      - 
        name: test with flake8 
        run: |
          cd backend
          python -m flake8 .
  
  build_and_push_backend:
    runs-on: ubuntu-latest
    needs: backend_tests
    steps:
      - 
        name: check out code
        uses: actions/checkout@v4
      - 
        name: set up docker buildx
        uses: docker/setup-buildx-action@v3        
      - 
        name: login to docker hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - 
        name: build and push
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/foodgram-backend:latest
  
  build_and_push_frontend:
    runs-on: ubuntu-latest
    steps:
      - 
        name: check out code
        uses: actions/checkout@v4
      - 
        name: set up docker buildx
        uses: docker/setup-buildx-action@v3        
      - 
        name: login to docker hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - 
        name: build and push
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/foodgram-frontend:latest
  
  build_and_push_gateway:
    runs-on: ubuntu-latest
    steps:
      - 
        name: check out code
        uses: actions/checkout@v4
      - 
        name: set up docker buildx
        uses: docker/setup-buildx-action@v3        
      - 
        name: login to docker hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - 
        name: build and push
        uses: docker/build-push-action@v5
        with:
          context: ./gateway
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/foodgram-gateway:latest
  
  deploy:
    runs-on: ubuntu-latest
    needs: 
      - build_and_push_backend
      - build_and_push_frontend
      - build_and_push_gateway
    steps:
      - 
        name: check out code
        uses: actions/checkout@v4
      - 
        name: copy docker-compose file via SSH
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "infra/compose.production.yml"
          target: "projects/fdgram"
      - 
        name: executing remote ssh commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd projects/fdgram/infra
            sudo docker compose --file compose.production.yml pull
            sudo docker compose --file compose.production.yml up --detach
            sudo docker compose --file compose.production.yml exec backend python manage.py migrate
            sudo docker compose --file compose.production.yml exec backend python manage.py collectstatic
            sudo docker compose --file compose.production.yml exec backend cp -r /collected_static/. /backend_static/static
  
  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_RECIPIENT }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: "foodgram deployed successfully"
